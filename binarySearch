<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Binary Search</title>
</head>

<body>
    <script>
        binarySEarch = (nums, val) => {
            let left = 0
            let right = nums.length - 1
            let mid = Math.floor((left + right) / 2)
            while (nums[mid] !== val && left <= right) {
                if (nums[left] === nums[right] === nums[mid]) {
                    return -1
                }
                if (nums[mid] < val) {
                    left = mid + 1
                } else {
                    right = mid - 1
                }
                mid = Math.floor((left + right) / 2)
            }
            if (nums[mid] === val) {
                return mid
            }
            return -1
        }
        // console.log(binarySEarch([1, 2, 3, 4, 5], 2))
        // console.log(binarySEarch([1, 2, 3, 4, 5], 6))

        //LEETCODE 35: Search Insert Position
        var searchInsert = function (nums, target) {
            let left = 0
            let right = nums.length - 1
            let mid = Math.floor((left + right) / 2)
            if (target > nums[nums.length - 1]) {
                return nums.length
            } else if (target < nums[left]) {
                return 0
            }
            while (left <= right && nums[mid] !== target) {
                if (nums[mid] < target) {
                    left = mid + 1
                } else {
                    right = mid - 1
                }
                mid = Math.floor((left + right) / 2)
            }
            if (nums[mid] === target) {
                return mid
            } else {
                if (target < nums[left]) {
                    return left
                } else {
                    return left + 1
                }
            }
        };
        console.log(searchInsert([1, 3, 3, 3, 3, 7], 3))

        //LEETCODE Q:34
        //First and Last postion in Sorted Array
        var searchRange = function (nums, target) {
            let left = 0
            let right = nums.length - 1
            let mid = Math.floor((left + right) / 2)
            while (left <= right && nums[mid] !== target) {
                if (nums[mid] < target) {
                    left = mid + 1
                } else {
                    right = mid - 1
                }
                mid = Math.floor((left + right) / 2)
            }
            if (nums[mid] === target) {
                left = mid
                right = mid
                while (nums[left] === target) {
                    left = left - 1
                }
                while (nums[right] === target) {
                    right = right + 1
                }
                return [left + 1, right - 1]
            } else {
                return [-1, -1]
            }
        }

        //String Search (NAIVE SOLUTION)
        naiveSearch = (long, short) => {
            let count = 0
            for (let i = 0; i < long.length; i++) {
                //count of number of times long[i]===long[j]
                let lenCount = 0
                //storing the value of i
                let iVal = i
                for (let j = 0; j < short.length; j++) {
                    if (short[j] === long[i]) {
                        lenCount++
                        i++
                    } else {
                        i = iVal
                        break
                    }
                    if (lenCount === short.length) {
                        count++
                        i = iVal
                    }
                }
            }
            return count
        }
        console.log(naiveSearch("lolie lolloled", "lol"))

        maxProduct = (nums) => {
            let max = Number.NEGATIVE_INFINITY;
            let prod = 1;
            let j = 0
            if (nums.length === 1) {
                return nums[0]
            }

            for (let i = 0; i < nums.length; i++) {
                prod = prod * nums[i]

                if (prod > max) {
                    max = prod
                } else {
                    prod = 1
                }
                if (prod === 0) {
                    prod = 1
                }
            }
            return max
        }
        console.log(maxProduct([3, -1, -1, 4, 2, -10]))
    </script>
</body>

</html>
